{"version":3,"sources":["App.js","index.js"],"names":["App","api_url","useState","data","setData","description","setDescription","number","id","update","setUpdate","useEffect","handleFetchData","handleChange","e","preventDefault","value","target","name","a","fetch","res","json","resData","alert","handleDelete","index","method","splice","handleCreate","length","body","JSON","stringify","title","complete","headers","dataJson","unshift","handleUpdate","className","type","placeholder","onChange","required","onClick","map","item","completed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0458500.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n// add css\nimport \"./App.css\";\n\nfunction App() {\n  //api url\n  const api_url = \"https://jsonplaceholder.typicode.com/todos\";\n  //state to store api resonse data\n  const [data, setData] = useState([]);\n  // state to get new task input\n  const [description, setDescription] = useState(\"\");\n  // state to get update task input\n  const [update, setUpdate] = useState({\n    description: \"\",\n    number: -1,\n    id: -1,\n  });\n  // hooks : calling handlefetchData function to get data from the api\n  useEffect(() => {\n    handleFetchData();\n  }, []);\n\n  // store update input values to the update state\n  const handleChange = (e) => {\n    e.preventDefault();\n    const value = e.target.value;\n    setUpdate({\n      ...update,\n      [e.target.name]: value,\n    });\n  };\n\n  // function : fetching data from the api_url\n  const handleFetchData = async () => {\n    //sending get resquest to the api\n    let res = await fetch(api_url);\n    // converting response to json\n    let resData = await res.json();\n    if (resData) {\n      //setting up the json data to the data state\n      setData([...resData]);\n    } else {\n      alert(\"Server error\");\n    }\n  };\n\n  // function : delete data from the api_url(dummy)\n  const handleDelete = async (id, index) => {\n    // sending delete request to the api\n    await fetch(api_url + `/${id}`, {\n      method: \"DELETE\",\n    });\n    //removing item from the state using item index\n    data.splice(index, 1);\n    //setting up updated data to the data state\n\n    setData([...data]);\n  };\n\n  // function : adding new task to the api_url(dummy)\n  const handleCreate = async (e) => {\n    // preventing form submit\n    e.preventDefault();\n    // preventing empty submit calls to the api\n    if (description.length <= 0) {\n      alert(\"New Task Field is Emplty\");\n    } else {\n      //sending post request to the api\n      let res = await fetch(api_url, {\n        method: \"POST\",\n        body: JSON.stringify({\n          title: description,\n          complete: false,\n        }),\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\",\n        },\n      });\n      // converting response to json\n      let dataJson = await res.json();\n      if (dataJson) {\n        // add json data to the state\n        data.unshift(dataJson);\n        //setting up the json data to the data state\n        setData([...data]);\n      } else {\n        alert(\"Server Error!\");\n      }\n    }\n  };\n\n  // function : updating api data (dummy)\n  const handleUpdate = async (e) => {\n    // preventing form submit\n    e.preventDefault();\n    // deconstructing the update state\n    const { description, id, number } = update;\n    // preventing empty submit calls to the api\n    if (description.length > 0 || id !== -1 || number !== -1) {\n      // sending put request to the api\n      let res = await fetch(api_url + `/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          id,\n          title: description,\n        }),\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\",\n        },\n      });\n      // converting response to json\n      let dataJson = await res.json();\n      if (dataJson) {\n        data[number - 1] = dataJson;\n        // add json data to the state\n        setData([...data]);\n      } else {\n        alert(\"Server Error!\");\n      }\n    } else {\n      if (description.length <= 0) {\n        alert(\"Update Field Empty!\");\n      } else if (number === -1) {\n        alert(\"Task No Field Empty\");\n      } else if (id === -1) {\n        alert(\"Task ID Field Empty\");\n      }\n    }\n  };\n\n  return (\n    <div className=\"App position-relative\">\n      {/* Nav Bar */}\n      <nav className=\"navbar navbar-dark bg-dark  fixed-top \">\n        <h1 className=\"display-4\">ToDo List</h1>\n      </nav>\n      <div className=\"main\">\n        <div className=\"form_container  position-fixed \">\n          {/* New task form */}\n          <form className=\"new_task_form \">\n            <div>\n              <h1 className=\"display-5\">New Task</h1>\n            </div>\n            {/* new input tag */}\n            <div className=\"form-floating mb-3\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"floatingInput\"\n                placeholder=\"What do you need to do ?\"\n                name=\"description\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                required\n              />\n              <label v-for=\"floatingInput\">What do you need to do ?</label>\n            </div>\n            {/* new task submit button */}\n            <div className=\"d-grid gap-2 col-6 mx-auto\">\n              <button\n                className=\"btn btn-primary\"\n                id=\"add-btn\"\n                type=\"submit\"\n                onClick={(e) => handleCreate(e)}\n              >\n                Add a task\n              </button>\n            </div>\n          </form>\n          <hr />\n          {/* update task form  */}\n          <form className=\"update_task_container\">\n            <div>\n              <h1 className=\"display-5\">Update Task</h1>\n            </div>\n            {/* update task input tag */}\n            <div className=\"form-floating mb-3\">\n              <input\n                className=\"form-control\"\n                id=\"des-input\"\n                type=\"text\"\n                name=\"description\"\n                value={update.description}\n                onChange={handleChange}\n                placeholder=\"What's the update\"\n                required\n              />\n              <label v-for=\"floatingInput\">What's the update</label>\n            </div>\n            {/* update task number input tag */}\n\n            <div className=\"form-floating mb-3\">\n              <input\n                className=\"form-control\"\n                id=\"des-input\"\n                type=\"number\"\n                name=\"number\"\n                placeholder=\"Enter Task No. :\"\n                value={update.number}\n                onChange={handleChange}\n                required\n              />\n              <label v-for=\"floatingInput\">Enter Task No : </label>\n            </div>\n            {/* update task id input tag */}\n            <div className=\"form-floating mb-3\">\n              <input\n                className=\"form-control\"\n                id=\"des-input\"\n                type=\"number\"\n                name=\"id\"\n                placeholder=\"Enter Task ID :\"\n                value={update.id}\n                onChange={handleChange}\n                required\n              />\n              <label v-for=\"floatingInput\">Enter Task ID : </label>\n            </div>\n\n            {/* update task submit button */}\n            <div className=\"d-grid gap-2 col-6 mx-auto\">\n              <button\n                className=\"btn btn-primary\"\n                id=\"add-btn\"\n                type=\"submit\"\n                onClick={(e) => handleUpdate(e)}\n              >\n                Update\n              </button>\n            </div>\n          </form>\n        </div>\n        {/* mapping over the data  */}\n        <div className=\"display_container \">\n          {data.map((item, index) => {\n            return (\n              <div className=\"card card_item\" key={index}>\n                {/* list header */}\n                <div className=\"card-header card_header_no_id\">\n                  <h5 className=\"display-6\">Task No : {index + 1}</h5>\n                  <p>\n                    <b>ID </b> : {item.id}\n                  </p>\n                </div>\n                {/* list body */}\n                <div className=\"card-body\">\n                  <div>\n                    <h4 className=\"card-title\">Task : {item.title}</h4>\n                  </div>\n                  <div>\n                    <p className=\"card-text \">\n                      Completed : {item.completed === false ? \"False\" : \"True\"}\n                    </p>\n                  </div>\n                  {/* list delete button */}\n                  <div className=\"delete_btn_container\">\n                    <button\n                      className=\"btn btn-outline-danger\"\n                      onClick={() => handleDelete(item.id, index)}\n                    >\n                      Complete / Delete\n                    </button>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}